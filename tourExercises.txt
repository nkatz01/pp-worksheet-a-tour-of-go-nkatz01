#1

	package main

	import (
		"fmt"
		"math"
	)

	func Sqrt(x float64) float64 {
		var z float64  = 1.0
		var newz float64
	 //fmt.Println(-0.99 <math.Pow(10,-5))
		//var x float64 = 2
		count :=0 
		for  newz = ((z + x /z) / 2); math.Abs(newz-z)>math.Pow(10,-5); count++ 	{
			// fmt.Println(math.Pow(10,-5))
			z = newz
			newz  = ((z + x /z) / 2)
		
			// newz -= (z*z - x) / (2*z)
			
			 
			 
			fmt.Println(count)
		}
		return newz
	}

	func main() {
		fmt.Printf("%f \n" ,Sqrt(2))
		//fmt.Println(Sqrt(2))
	}
		//val float64 =  math.Pow(10,-5)
		//va  float64 = math.Abs(val)







# 2

	package main

	import "golang.org/x/tour/pic"
	//import "math"

	func Pic(dx, dy int) [][]uint8 {
		
		arr := make([][]uint8, dy)
		for i := range arr {
			
			innerArr := make([]uint8, dx)
			for j := range innerArr{
				innerArr[j] = uint8((i+j)/2 )
				//innerArr[j] = uint8(math.Pow(float64(i),float64(j)))
				//innerArr[j] = uint8((ixj)/2 )
			}
			arr[i] = innerArr
		}
		return arr
	}

	func main() {
		pic.Show(Pic)
	}
	
#3
	
	package main

import (
	 
	
	"strings"
	"golang.org/x/tour/wc"
)

func WordCount(s string) map[string]int {
	
	 mp := make(map[string]int)
	arr := strings.Fields(s)
	for _ ,value := range arr {
		  _, ok := mp[value] 
		if ok {
			mp[value] = mp[value]+1	
		} else {
			mp[value]=1
		}
		
	}
	 
	return mp
}

func main() {
	wc.Test(WordCount)
}


#4

package main

import "fmt"

// fibonacci is a function that returns
// a function that returns an int.
func fibonacci() func() int {
	nMin2 :=0
	nMin1 :=1
	var oldFib int
	return func() int {

		oldFib= nMin2
		nMin2 = nMin1
		nMin1 = oldFib + nMin1
		
		return oldFib
		  	
	}
	
}

func main() {
	f := fibonacci()
	for i := 0; i < 10; i++ {
		fmt.Println(f())
	}
}

#5

package main

import "fmt"

type IPAddr [4]byte

// TODO: Add a "String() string" method to IPAddr.
/*

*/func (ip IPAddr) String() string {
	 
	return fmt.Sprintf("%d.%d.%d.%d ", ip[0],ip[1],ip[2],ip[3] )
}
func main() {
	hosts := map[string]IPAddr{
		"loopback":  {255, 0, 0, 1},
		"googleDNS": {8, 8, 8, 8},
	}
	 
	 for name, ip := range hosts {
 
		
		 fmt.Printf("%v: %v\n", name, ip)
	} 
}
 

