#1

	package main

	import (
		"fmt"
		"math"
	)

	func Sqrt(x float64) float64 {
		var z float64  = 1.0
		var newz float64
	 //fmt.Println(-0.99 <math.Pow(10,-5))
		//var x float64 = 2
		count :=0 
		for  newz = ((z + x /z) / 2); math.Abs(newz-z)>math.Pow(10,-5); count++ 	{
			// fmt.Println(math.Pow(10,-5))
			z = newz
			newz  = ((z + x /z) / 2)
		
			// newz -= (z*z - x) / (2*z)
			
			 
			 
			fmt.Println(count)
		}
		return newz
	}

	func main() {
		fmt.Printf("%f \n" ,Sqrt(2))
		//fmt.Println(Sqrt(2))
	}
		//val float64 =  math.Pow(10,-5)
		//va  float64 = math.Abs(val)







# 2

	package main

	import "golang.org/x/tour/pic"
	//import "math"

	func Pic(dx, dy int) [][]uint8 {
		
		arr := make([][]uint8, dy)
		for i := range arr {
			
			innerArr := make([]uint8, dx)
			for j := range innerArr{
				innerArr[j] = uint8((i+j)/2 )
				//innerArr[j] = uint8(math.Pow(float64(i),float64(j)))
				//innerArr[j] = uint8((ixj)/2 )
			}
			arr[i] = innerArr
		}
		return arr
	}

	func main() {
		pic.Show(Pic)
	}
	
#3
	
	package main

import (
	 
	
	"strings"
	"golang.org/x/tour/wc"
)

func WordCount(s string) map[string]int {
	
	 mp := make(map[string]int)
	arr := strings.Fields(s)
	for _ ,value := range arr {
		  _, ok := mp[value] 
		if ok {
			mp[value] = mp[value]+1	
		} else {
			mp[value]=1
		}
		
	}
	 
	return mp
}

func main() {
	wc.Test(WordCount)
}


#4

package main

import "fmt"

// fibonacci is a function that returns
// a function that returns an int.
func fibonacci() func() int {
	nMin2 :=0
	nMin1 :=1
	var oldFib int
	return func() int {

		oldFib= nMin2
		nMin2 = nMin1
		nMin1 = oldFib + nMin1
		
		return oldFib
		  	
	}
	
}

func main() {
	f := fibonacci()
	for i := 0; i < 10; i++ {
		fmt.Println(f())
	}
}

#5

package main

import (
	"fmt"
	"strconv"
)

type IPAddr [4]byte

/*
func (ip IPAddr) String() string {

	return fmt.Sprintf("%d.%d.%d.%d ", ip[0],ip[1],ip[2],ip[3] )
}
*/
func (ip IPAddr) String() string {
	var st string
	for _, val := range ip {
		st += strconv.Itoa(int(val)) + "."
	}
	st = st[:len(st)-1]
	return fmt.Sprintf("%v ", st)
}
func main() {
	hosts := map[string]IPAddr{
		"loopback":  {255, 0, 0, 1},
		"googleDNS": {8, 8, 8, 8},
	}

	for name, ip := range hosts {

		fmt.Printf("%v: %v\n", name, ip)
	}
}

#6

package main

import (
	"fmt"
	"math"
)

type ErrNegativeSqrt float64

func (e ErrNegativeSqrt) Error() string {

	return fmt.Sprintf("cannot Sqrt negative number: %v", float64(e))

}

func Sqrt(x float64) (float64, error) {
	if x < 0 {

		return 0, ErrNegativeSqrt(x)
	}

	var z float64 = 1.0
	var newz float64

	count := 0
	for newz = ((z + x/z) / 2); math.Abs(newz-z) > math.Pow(10, -5); count++ {

		z = newz
		newz = ((z + x/z) / 2)

		fmt.Println(count)
	}
	return newz, nil
}

func main() {

	format(Sqrt(2))
	format(Sqrt(-2))
}
func format(i float64, err error) {

	if err != nil {
		fmt.Println(err)
	} else {
		fmt.Println("Sqrt is:", i)
	}
}

#7

package main
import (
 )
 import "golang.org/x/tour/reader"

type MyReader struct{}

 func (mr MyReader) Read(b []byte) (int,  error){
 
	b[0] = 'A'
	
	return 1, nil 
}


func main() {
 	reader.Validate(MyReader{})
	
}

#8

package main

import (
	"io"
	"os"
	"strings"

	"unicode"
)

type rot13Reader struct {
	r io.Reader
}

func (r13 rot13Reader) Read(b []byte) (n int, err error) {

	i, err := r13.r.Read(b)
	str := string(b)
	var deciphered string
	for _, l := range str {

		if !unicode.IsSpace(l) {
			if l <= 'm' {
				l = l + 13
			} else {
				l = l - 13
			}
		}
		deciphered += string(l)
	}

	copy(b, deciphered)
	return i, err
}

func main() {
	s := strings.NewReader("Lbh penpxrq gur pbqr!")
	r := rot13Reader{s}

	io.Copy(os.Stdout, &r)

}

#9
package main

import (
	"golang.org/x/tour/pic"

	"image"
	"image/color"
)

type Image struct {
}

func (Image) At(x, y int) color.Color {
	return color.RGBA{uint8(x), uint8(y), 255, 255}
}

func (Image) ColorModel() color.Model {

	return color.RGBAModel

}

func (Image) Bounds() image.Rectangle {
	return image.Rect(0, 0, 200, 200)
}

func main() {
	m := Image{}
	pic.ShowImage(m)

}

#10 
package main

import (
	"fmt"
	"golang.org/x/tour/tree"
 	"sort"
)

// Walk walks the tree t sending all values
// from the tree to the channel ch.
func Walk(t *tree.Tree, ch chan int) {

	
	if t.Left == nil && t.Right == nil {
		ch <- t.Value
	} else {
		if t.Left != nil {
			Walk(t.Left, ch)
		}
		if t.Right != nil {
			Walk(t.Right, ch)
		}

		ch <- t.Value
	}
}

// Same determines whether the trees
// t1 and t2 contain the same values.
func Same(t1, t2 *tree.Tree) bool {
	arr1 := make([]int, 0)
	arr2 := make([]int, 0)

	ch1 := make(chan int)
	ch2 := make(chan int)
	go Walk(t1, ch1)
	go Walk(t2, ch2)

	for i := 1; i <= 20; i++ {

		select {
		case res := <-ch1:
			arr1 = append(arr1, res)
		case res := <-ch2:
			arr2 = append(arr2, res)

		}
	}

	sort.Ints(arr1)
	sort.Ints(arr2)
	

	if len(arr1) != len(arr2) {
		return false
	}
	for i, v := range arr1 {
		if v != arr2[i] {
			return false
		}
	}
	return true

}

func main() {
	//tr := tree.New(10)
	//fmt.Println(tr)
	ch := make(chan int)
	go Walk(tree.New(10), ch)
 
	for i := 1; i <= 10; i++ {

		fmt.Println(<-ch)

	}

	fmt.Println(Same(tree.New(1), tree.New(1)))
	fmt.Println(Same(tree.New(1), tree.New(2)))

}

#11
package main

import (
	"fmt"
)

type Fetcher interface {
	// Fetch returns the body of URL and
	// a slice of URLs found on that page.
	Fetch(url string) (body string, urls []string, err error)
}

// Crawl uses fetcher to recursively crawl
// pages starting with url, to a maximum of depth.
func Crawl(url string,  fetcher Fetcher, cache map[string]string) {
	// TODO: Fetch URLs in parallel.
	// TODO: Don't fetch the same URL twice.
	// This implementation doesn't do either:
	 
	body, urls, err := fetcher.Fetch(url)
	 cache[url]=body
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Printf("found: %s %q\n", url, body)
	
	//fmt.Println(cache)
	for _, u := range urls {
		if _, ok := cache[u]; !ok {
		Crawl(u,   fetcher,cache)
		}
	}
	return
}

func main() {
	cache := make(map[string]string)
 	Crawl("https://golang.org/",   fetcher,cache)
}
 //type Cache map[string]string

 // fakeFetcher is Fetcher that returns canned results.
type fakeFetcher map[string]*fakeResult

type fakeResult struct {
	body string
	urls []string
}

func (f fakeFetcher) Fetch(url string) (string, []string, error) {
	if res, ok := f[url]; ok {
		return res.body, res.urls, nil
	}
	return "", nil, fmt.Errorf("not found: %s", url)
}

// fetcher is a populated fakeFetcher.
var fetcher = fakeFetcher{
	"https://golang.org/": &fakeResult{
		"The Go Programming Language",
		[]string{
			"https://golang.org/pkg/",
			"https://golang.org/cmd/",
		},
	},
	"https://golang.org/pkg/": &fakeResult{
		"Packages",
		[]string{
			"https://golang.org/",
			"https://golang.org/cmd/",
			"https://golang.org/pkg/fmt/",
			"https://golang.org/pkg/os/",
		},
	},
	"https://golang.org/pkg/fmt/": &fakeResult{
		"Package fmt",
		[]string{
			"https://golang.org/",
			"https://golang.org/pkg/",
		},
	},
	"https://golang.org/pkg/os/": &fakeResult{
		"Package os",
		[]string{
			"https://golang.org/",
			"https://golang.org/pkg/",
		},
		
	},
	
}



